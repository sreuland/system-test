#! /usr/bin/env bash
set -e

echo "Starting system test ..." > /var/log/systemtest.log

# the versions of software that tests will use
RUST_TOOLCHAIN_DEFAULT_INSTALLED_VERSION=1.65.0
RUST_TOOLCHAIN_VERSION=
SOROBAN_CLI_CRATE_VERSION=
SOROBAN_CLI_SOURCE_VOLUME=
SOROBAN_EXAMPLES_GIT_HASH="main"
SOROBAN_EXAMPLES_REPO_URL="https://github.com/stellar/soroban-examples.git"
DEBUG_MODE=

# the target network under test
CORE_DEBIAN_VERSION=
HORIZON_DEBIAN_VERSION=
SOROBAN_RPC_DEBIAN_VERSION=
SOROBAN_RPC_SOURCE_VOLUME=
TARGET_NETWORK=standalone
TARGET_NETWORK_PASSPHRASE="Standalone Network ; February 2017"
TARGET_NETWORK_SECRET_KEY="SC5O7VZUXDJ6JBDSZ74DSERXL7W3Y5LTOAMRF7RQRL3TAGAPS7LUVG3L"
TARGET_NETWORK_PUBLIC_KEY="GBZXN7PIRZGNMHGA7MUUUF4GWPY5AYPV6LY4UV2GL6VJGIQRXFDNMADI"
TARGET_NETWORK_RPC_URL="http://localhost:8000/soroban/rpc"

# example filter for all combos of one scenario outline: ^TestDappDevelop$/^DApp developer compiles, deploys and invokes a contract.*$
# each row in example data for a scenario outline is postfixed with '#01', '#02', example:
# TestDappDevelop/DApp developer compiles, deploys and invokes a contract#01
TEST_FILTER=""
VERBOSE_OUTPUT=false
RUN_TARGET_STACK_ONLY=false
CANCELLED=false

trap printout SIGINT
printout() {
   echo "Cancelling and exit."
   exit
}

trap finish EXIT
function finish {
  CANCELLED=true
  if [ "$DEBUG_MODE" = "true" ]; then
      echo "** DEBUG MODE Enabled **"
      read -p 'Debug mode, you can shell into the container now, hit enter to let container stop: ' 
  fi  
}

function main() {

    process_args "$@"

    if [ "$TARGET_NETWORK" != "standalone" ] && [ "$TARGET_NETWORK" != "futurenet" ]; then
        echo "Invalid TargetNetwork, must be one of standalone or futurenet, aborting test ..."
        exit 1
    fi  

    if [ "$RUN_TARGET_STACK_ONLY" != "true" ] && [ -z "$SOROBAN_CLI_CRATE_VERSION" ] && [ -z "$SOROBAN_CLI_SOURCE_VOLUME" ]; then
        echo "Invalid CLI config, must provide SorobanCLICrateVersion or SorobanCLISourceVolume , aborting test ..."
        exit 1
    fi 

    if [ -z "$SOROBAN_RPC_DEBIAN_VERSION" ] && [ -z "$SOROBAN_RPC_SOURCE_VOLUME" ]; then
        echo "Invalid RPC config, must provide SorobanRPCDebianVersion or SorobanRPCSourceVolume , aborting test ..."
        exit 1
    fi 

    if [ -z "$CORE_DEBIAN_VERSION" ]; then
        echo "Invalid Core config, must provide CoreDebianVersion , aborting test ..."
        exit 1
    fi 

    if [ -z "$HORIZON_DEBIAN_VERSION" ]; then
        echo "Invalid Horizon config, must provide HorizonDebianVersion , aborting test ..."
        exit 1
    fi 

    echo "running target stack with following config:"
    echo "  CORE_DEBIAN_VERSION=$CORE_DEBIAN_VERSION"
    echo "  HORIZON_DEBIAN_VERSION=$HORIZON_DEBIAN_VERSION"
    if [ ! -z "$SOROBAN_RPC_SOURCE_VOLUME" ]; then
        echo "  SOROBAN_RPC_SOURCE_VOLUME=$SOROBAN_RPC_SOURCE_VOLUME"
    else
        echo "  SOROBAN_RPC_DEBIAN_VERSION=$SOROBAN_RPC_DEBIAN_VERSION"
    fi  
     
    echo "Installing Soroban stack ..."
    export DEBIAN_FRONTEND=noninteractive
    apt-get update -qq >> /var/log/systemtest.log 2>&1
    apt-get install -y -qq --allow-downgrades stellar-core=${CORE_DEBIAN_VERSION} >> /var/log/systemtest.log 2>&1
    echo "Installed core ..."
    apt-get install -y -qq --allow-downgrades stellar-horizon=${HORIZON_DEBIAN_VERSION} >> /var/log/systemtest.log 2>&1
    echo "Installed horizon ..."
    if [ ! -z "$SOROBAN_RPC_SOURCE_VOLUME" ]; then
       pushd "$SOROBAN_RPC_SOURCE_VOLUME"
       go build -v -trimpath -buildvcs=false -o usr/bin/stellar-soroban-rpc ./cmd/soroban-rpc
       popd
       echo "Compiled soroban rpc from source ... $(/usr/bin/stellar-soroban-rpc version)"
    else
       apt-get install -y -qq --allow-downgrades stellar-soroban-rpc=${SOROBAN_RPC_DEBIAN_VERSION} >> /var/log/systemtest.log 2>&1
       echo "Installed soroban rpc ..."
    fi  

    /start --$TARGET_NETWORK --enable-soroban-rpc >> /var/log/systemtest.log 2>&1 &
    validateSorobanRPC
    echo "Started the Soroban stack on target network $TARGET_NETWORK ..." 
    
    apt-get clean -qq >> /var/log/systemtest.log 2>&1
    
    echo "Tests can now begin ..."
    if [ "$RUN_TARGET_STACK_ONLY" = "true" ]; then  
        while [ "$CANCELLED" != "true" ];
        do 
          sleep 10 
        done
        return
    fi  

    echo "  RUST_TOOLCHAIN_VERSION=${RUST_TOOLCHAIN_VERSION:-$(rustc --version 2>/dev/null )}"
    if [ ! -z "$SOROBAN_CLI_SOURCE_VOLUME" ];  then
        echo "  SOROBAN_CLI_SOURCE_VOLUME=${SOROBAN_CLI_SOURCE_VOLUME:-none}"
    else 
        echo "  SOROBAN_CLI_CRATE_VERSION=${SOROBAN_CLI_CRATE_VERSION:-$(soroban version 2>/dev/null )}"
    fi  
    echo "  SOROBAN_EXAMPLES_GIT_HASH=$SOROBAN_EXAMPLES_GIT_HASH"
    echo "  SOROBAN_EXAMPLES_REPO_URL=$SOROBAN_EXAMPLES_REPO_URL"
    echo "  TARGET_NETWORK=$TARGET_NETWORK"
    echo "  TARGET_NETWORK_PASSPHRASE=$TARGET_NETWORK_PASSPHRASE"
    echo "  TARGET_NETWORK_SECRET_KEY=$TARGET_NETWORK_SECRET_KEY"
    echo "  TARGET_NETWORK_PUBLIC_KEY=$TARGET_NETWORK_PUBLIC_KEY"
    echo "  TARGET_NETWORK_RPC_URL=$TARGET_NETWORK_RPC_URL"
    echo "  TEST_FILTER=${TEST_FILTER}"

    if [ ! -z "$RUST_TOOLCHAIN_VERSION" ] && [ "$RUST_TOOLCHAIN_VERSION" != "$RUST_TOOLCHAIN_DEFAULT_INSTALLED_VERSION" ]; then 
      echo "Installing rust toolchain $RUST_TOOLCHAIN_VERSION ..."
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain "${RUST_TOOLCHAIN_VERSION}" 
    fi 

    cd /opt/test/bin

    export SorobanCLICrateVersion=${SOROBAN_CLI_CRATE_VERSION}
    export SorobanCLISourceVolume=${SOROBAN_CLI_SOURCE_VOLUME}
    export SorobanExamplesGitHash=${SOROBAN_EXAMPLES_GIT_HASH}
    export SorobanExamplesRepoURL=${SOROBAN_EXAMPLES_REPO_URL}
    export TargetNetworkPassPhrase="${TARGET_NETWORK_PASSPHRASE}"
    export TargetNetworkSecretKey=${TARGET_NETWORK_SECRET_KEY}
    export TargetNetworkPublicKey=${TARGET_NETWORK_PUBLIC_KEY}
    export TargetNetworkRPCURL=${TARGET_NETWORK_RPC_URL}
    export VerboseOutput=${VERBOSE_OUTPUT}

    for file in ./*; 
    do 
      if [ "$CANCELLED" = "true" ]; then
          break
      fi

      if [[ "$file" =~ ^.*\.feature$ ]]; then 
          continue
      fi  
      # these bin files were compiled from go feature tests in the Dockerfile during image build
      echo "Running test binary ${file} ... "
      ${file} -test.v ${TEST_FILTER};
    done 
    
}

function process_args() {
    while [[ -n "$1" ]]; do
      ARG="$1"
      shift

      case "${ARG}" in
      --DebugMode)
        DEBUG_MODE="$1"
        shift
        ;;    
      --RustToolchainVersion)
        RUST_TOOLCHAIN_VERSION="$1"
        shift
        ;;  
      --CoreDebianVersion)
        CORE_DEBIAN_VERSION="$1"
        shift
        ;;
      --HorizonDebianVersion)
        HORIZON_DEBIAN_VERSION="$1"
        shift
        ;;  
      --SorobanRPCDebianVersion)
        SOROBAN_RPC_DEBIAN_VERSION="$1"
        shift
        ;; 
      --SorobanRPCSourceVolume)
        SOROBAN_RPC_SOURCE_VOLUME="$1"
        shift
        ;;   
      --SorobanCLICrateVersion)
        SOROBAN_CLI_CRATE_VERSION="$1"
        shift
        ;;  
      --SorobanCLISourceVolume)
        SOROBAN_CLI_SOURCE_VOLUME="$1"
        shift
        ;;      
      --SorobanJSClientNpmVersion)
        SOROBAN_JS_CLIENT_NPM_VERSION="$1"
        shift
        ;;   
      --SorobanExamplesGitHash)
        SOROBAN_EXAMPLES_GIT_HASH="$1"
        shift
        ;;     
      --SorobanExamplesRepoURL)
        SOROBAN_EXAMPLES_REPO_URL="$1"
        shift
        ;;   
      --TestFilter)
        TEST_FILTER="-test.run ""$1"""
        shift
        ;;     
      --VerboseOutput)
        VERBOSE_OUTPUT="$1"
        shift
        ;;  
      --RunTargetStackOnly)
        RUN_TARGET_STACK_ONLY="$1"
        shift
        ;;    
      --TargetNetwork)
        TARGET_NETWORK="$1"
        shift
        ;;  
      --TargetNetworkPassphrase) 
        TARGET_NETWORK_PASSPHRASE="$1"
        shift
        ;;    
      --TargetNetworkTestAccountSecret) 
        TARGET_NETWORK_SECRET_KEY="$1"
        shift
        ;;    
      --TargetNetworkTestAccountPublic) 
        TARGET_NETWORK_PUBLIC_KEY="$1"
        shift
        ;;             
      *)
      esac
    done
}

function validateHorizon () {
    COUNTER=1
    while ! (curl --silent --location --request GET 'http://localhost:8000' | jq --exit-status '.history_latest_ledger > 0'); do
      if [ $COUNTER -gt 24 ]; then 
          echo "Horizon ingestion did not become available in 2 minutes, aborting test ..."
          exit 1
      fi 
      echo "Waiting for horizon ingestion to be caught up ..."
      sleep 5
      COUNTER=$[$COUNTER +1]
    done 
    echo "Horizon ingestion is moving forward ..."
}

function validateSorobanRPC () {
    COUNTER=1
    while ! (curl --silent --location --request POST 'http://localhost:8000/soroban/rpc' \
                --header 'Content-Type: application/json' \
        --data-raw '{
          "jsonrpc": "2.0",
          "id": 10235,
          "method": "getHealth"
          
        }' | jq --exit-status '.result.status == "healthy"'); do
      if [ $COUNTER -gt 24 ]; then 
          echo "Soroban rpc did not become available in 2 minutes, aborting test ..."
          exit 1
      fi 
      echo "Waiting for soroban rpc to be available..."
      sleep 5
      COUNTER=$[$COUNTER +1]
    done 
    echo "Soroban rpc is running ..."

    validateHorizon

}

main "$@"